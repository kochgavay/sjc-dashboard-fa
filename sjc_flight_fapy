<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flight Card Prototype</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Material Icons CDN -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Light gray background */
            display: flex;
            flex-direction: column; /* Allow vertical stacking of textarea and card */
            justify-content: flex-start; /* Align to top */
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 1rem;
            gap: 1.5rem; /* Space between loading/error and card container */
        }
        .material-icons {
            margin-right: 12px;
            animation: softBlink 1s infinite alternate; /* 1s duration, infinite, alternates direction */
        }

        /* Keyframes for the soft blinking animation */
        @keyframes softBlink {
            0% {
                opacity: 1;
            }
            100% {
                opacity: 0.2; /* Blinks softly to 20% opacity */
            }
        }

        /* Styling for the container of multiple flight cards */
        #flightCardsContainer > div:not(:last-child) {
            margin-bottom: 24px; /* 24px spacing between cards */
        }
    </style>
</head>
<body>
    <div class="w-full max-w-lg bg-white rounded-lg shadow-lg p-6 border border-gray-200">
        <h2 class="text-xl font-semibold mb-4 text-gray-800">Flight Data</h2>
        <div id="loadingIndicator" class="hidden text-blue-600 font-semibold text-lg mb-4">
            Loading flight data...
        </div>
        <div id="errorMessage" class="text-red-600 mb-4 text-center text-base hidden max-w-lg p-4 bg-red-100 rounded-lg shadow"></div>
    </div>

    <!-- Container for multiple flight cards -->
    <div id="flightCardsContainer" class="flex flex-col items-center w-full max-w-sm mt-8">
        <!-- Flight cards will be inserted here by JavaScript -->
    </div>

    <script>
        // FlightAware API Configuration
        const FLIGHTAWARE_API_KEY = 'gjHfOw8lEoR3eck5zN50DTGFeSnyxxPy';
        const FLIGHTAWARE_BASE_URL = 'https://api.flightaware.com/api/flights';
        const SEARCH_LATLONG = '37.413276 -121.990691 37.376692 -121.934651'; // Your specified coordinates

        // // Default JSON data (for demonstration purposes if API call fails or is not desired)
        // const DEFAULT_FLIGHT_DATA = {
        //     "flights": [
        //         {
        //             "ident": "ASA1175",
        //             "ident_icao": "ASA1175",
        //             "ident_iata": "AS1175",
        //             "fa_flight_id": "ASA1175-1751175499-airline-1491p",
        //             "actual_off": "2025-07-01T22:36:29Z",
        //             "actual_on": null,
        //             "foresight_predictions_available": true,
        //             "predicted_out": null,
        //             "predicted_off": null,
        //             "predicted_on": null,
        //             "predicted_in": null,
        //             "predicted_out_source": null,
        //             "predicted_off_source": null,
        //             "predicted_on_source": null,
        //             "predicted_in_source": null,
        //             "origin": {
        //                 "code": "KSFO",
        //                 "code_icao": "KSFO",
        //                 "code_iata": "SFO",
        //                 "code_lid": "SFO",
        //                 "timezone": "America/Los_Angeles",
        //                 "name": "San Francisco Int'l",
        //                 "city": "San Francisco",
        //                 "airport_info_url": "/airports/KSFO"
        //             },
        //             "destination": {
        //                 "code": "KSEA",
        //                 "code_icao": "KSEA",
        //                 "code_iata": "SEA",
        //                 "code_lid": "SEA",
        //                 "timezone": "America/Los_Angeles",
        //                 "name": "Seattle-Tacoma Intl",
        //                 "city": "Seattle",
        //                 "airport_info_url": "/airports/KSEA"
        //             },
        //             "waypoints": [],
        //             "first_position_time": "2025-07-01T22:23:22Z",
        //             "last_position": {
        //                 "fa_flight_id": "ASA1175-1751175499-airline-1491p",
        //                 "altitude": 17,
        //                 "altitude_change": "C",
        //                 "groundspeed": 195,
        //                 "heading": 319,
        //                 "latitude": 37.39622,
        //                 "longitude": -121.96314,
        //                 "timestamp": "2025-07-01T22:37:01Z",
        //                 "update_type": "A"
        //             },
        //             "bounding_box": [],
        //             "ident_prefix": null,
        //             "aircraft_type": "B739"
        //         },
        //         {
        //             "ident": "UAL200",
        //             "ident_icao": "UAL200",
        //             "ident_iata": "UA200",
        //             "fa_flight_id": "UAL200-123456789-airline-abcd",
        //             "actual_off": "2025-07-01T10:00:00Z",
        //             "actual_on": null,
        //             "foresight_predictions_available": true,
        //             "predicted_out": null,
        //             "predicted_off": null,
        //             "predicted_on": null,
        //             "predicted_in": null,
        //             "predicted_out_source": null,
        //             "predicted_off_source": null,
        //             "predicted_on_source": null,
        //             "predicted_in_source": null,
        //             "origin": {
        //                 "code": "KDEN",
        //                 "code_icao": "KDEN",
        //                 "code_iata": "DEN",
        //                 "code_lid": "DEN",
        //                 "timezone": "America/Denver",
        //                 "name": "Denver Int'l",
        //                 "city": "Denver",
        //                 "airport_info_url": "/airports/KDEN"
        //             },
        //             "destination": {
        //                 "code": "KSFO",
        //                 "code_icao": "KSFO",
        //                 "code_iata": "SFO",
        //                 "code_lid": "SFO",
        //                 "timezone": "America/Los_Angeles",
        //                 "name": "San Francisco Int'l",
        //                 "city": "San Francisco",
        //                 "airport_info_url": "/airports/KSFO"
        //             },
        //             "waypoints": [],
        //             "first_position_time": "2025-07-01T09:45:00Z",
        //             "last_position": {
        //                 "fa_flight_id": "UAL200-123456789-airline-abcd",
        //                 "altitude": 30000,
        //                 "altitude_change": "D",
        //                 "groundspeed": 450,
        //                 "heading": 270,
        //                 "latitude": 39.7392,
        //                 "longitude": -104.9903,
        //                 "timestamp": "2025-07-01T10:15:00Z",
        //                 "update_type": "A"
        //             },
        //             "bounding_box": [],
        //             "ident_prefix": null,
        //             "aircraft_type": "B738"
        //         }
        //     ],
        //     "links": null,
        //     "num_pages": 1
        // };

        // Mapping for aircraft types
        const AIRCRAFT_TYPES = {
            "A124": "Antonov An-124 Ruslan", "A140": "Antonov An-140", "A148": "Antonov An-148", "A19N": "Airbus A319neo", "A20N": "Airbus A320neo", "A21N": "Airbus A321neo", "A225": "Antonov An-225 Mriya", "A306": "Airbus A300-600", "A30B": "Airbus A300B2, A300B4 and A300C4", "A310": "Airbus A310-200", "A318": "Airbus A318", "A319": "Airbus A319", "A320": "Airbus A320", "A321": "Airbus A321", "A332": "Airbus A330-200", "A333": "Airbus A330-300", "A337": "Airbus A330-700 BelugaXL", "A338": "Airbus A330-800", "A339": "Airbus A330-900", "A342": "Airbus A340-200", "A343": "Airbus A340-300", "A345": "Airbus A340-500", "A346": "Airbus A340-600", "A359": "Airbus A350-900", "A35K": "Airbus A350-1000", "A388": "Airbus A380-800", "A3ST": "Airbus A300-600ST \"Super Transporter\" / \"Beluga\"", "A400": "Airbus A400M Atlas", "A748": "Hawker Siddeley HS 748", "AC90": "Gulfstream/Rockwell (Aero) Turbo Commander 690", "AN26": "Antonov An-26", "AN28": "Antonov An-28", "AN30": "Antonov An-30", "ATP": "British Aerospace ATP", "B190": "Beechcraft 1900", "B37M": "Boeing 737 MAX 7", "B38M": "Boeing 737 MAX 8", "B39M": "Boeing 737 MAX 9", "B3XM": "Boeing 737 MAX 10", "B461": "BAe 146-100", "B462": "BAe 146-200", "B463": "BAe 146-300", "B52": "Boeing B-52 Stratofortress", "B703": "Boeing 707", "B712": "Boeing 717", "B720": "Boeing 720B", "B721": "Boeing 727-100", "B722": "Boeing 727-200", "B732": "Boeing 737-200", "B733": "Boeing 737-300", "B734": "Boeing 737-400", "B735": "Boeing 737-500", "B736": "Boeing 737-600", "B737": "Boeing 737-700", "B738": "Boeing 737-800", "B739": "Boeing 737-900", "B741": "Boeing 747-100", "B742": "Boeing 747-200", "B743": "Boeing 747-300", "B744": "Boeing 747-400", "B748": "Boeing 747-8I", "B74R": "Boeing 747SR", "B74S": "Boeing 747SP", "B752": "Boeing 757-200", "B753": "Boeing 757-300", "B762": "Boeing 767-200", "B763": "Boeing 767-300", "B764": "Boeing 767-400ER", "B772": "Boeing 777-200", "B773": "Boeing 777-300", "B778": "Boeing 777-8", "B779": "Boeing 777-9", "B77L": "Boeing 777-200LR", "B77W": "Boeing 777-300ER", "B788": "Boeing 787-8", "B789": "Boeing 787-9", "B78X": "Boeing 787-10", "BA11": "British Aerospace (BAC) One Eleven", "BALL": "Balloon", "BCS1": "Airbus A220-100", "BCS3": "Airbus A220-300", "C25B": "Cessna Citation CJ3", "C25C": "Cessna Citation CJ4", "C30J": "Lockheed Martin C-130J Hercules", "C5M": "Lockheed C-5M Super Galaxy", "C500": "Cessna Citation I", "C510": "Cessna Citation Mustang", "C919": "Comac C919", "CL2T": "Bombardier 415", "CL30": "Bombardier BD-100 Challenger 300", "DC10": "Douglas DC-10-30 Combi", "DHC5": "De Havilland Canada DHC-5 Buffalo", "DHC6": "De Havilland Canada DHC-6 Twin Otter", "DHC7": "De Havilland Canada DHC-7 Dash 7", "E110": "Embraer EMB 110 Bandeirante", "E120": "Embraer EMB 120 Brasilia", "E135": "Embraer RJ135", "E145": "Embraer RJ145", "E170": "Embraer 170", "E545": "Embraer Legacy 450", "E550": "Embraer Legacy 500", "E55P": "Embraer Phenom 300", "ERD": "Embraer RJ140", "F100": "Fokker 100", "F27": "Fokker F27 Friendship", "F28": "Fokker F28 Fellowship", "F70": "Fokker 70", "F900": "Dassault Falcon 900", "FA50": "Dassault Falcon 50", "GLID": "Glider (sailplane)", "GYRO": "Ultralight gyrocopter", "H25C": "British Aerospace 125-1000 series / Hawker/Raytheon 1000", "HDJT": "Honda HA-420", "I114": "Ilyushin Il-114", "IL18": "Ilyushin Il-18", "IL62": "Ilyushin Il-62", "IL76": "Ilyushin Il-76", "IL86": "Ilyushin Il-86", "IL96": "Ilyushin Il-96", "J328": "Fairchild Dornier 328JET", "M1F": "McDonnell Douglas MD-11F", "M1M": "McDonnell Douglas MD-11C", "MD11": "McDonnell Douglas MD-11", "MU2": "Mitsubishi Mu-2", "N262": "Aerospatiale (Nord) 262", "NOMA": "N24A Nomad", "PARA": "Powered parachute/paraplane", "SHIP": "Airship", "ULAC": "Ultralight aircraft", "UHEL": "Ultralight helicopter",
          };

        // Mapping for airline codes
        const AIRLINE_CODES = {
            "UAL": "United Airlines",
            "SWA": "Southwest",
            "DAL": "Delta",
            "ASA": "Alaska",
            "AAL": "American Airlines",
            "JBU": "JetBlue",
            "FFT": "Frontier",
            "SKW": "SkyWest",
            "NKS": "Spirit",
            "HXA": "Hawaiian Airlines",
            "Y4": "Volaris",
            "ZG": "ZIPAIR"
        };

        const loadingIndicator = document.getElementById('loadingIndicator');
        const flightCardsContainer = document.getElementById('flightCardsContainer');
        const errorMessageDiv = document.getElementById('errorMessage');

        /**
         * Creates and returns a single flight card HTML element.
         * @param {Object} flightData - The flight object from the JSON.
         * @returns {HTMLElement} The created flight card div element.
         */
        function createFlightCardElement(flightData) {
            const cardDiv = document.createElement('div');
            cardDiv.className = 'flight-card bg-white rounded-lg shadow-lg p-6 w-full border border-gray-200';

            // City name (conditional display) and Icon
            const cityDisplayDiv = document.createElement('div');
            cityDisplayDiv.className = 'text-2xl font-bold text-gray-800 mb-2 flex items-center';

            const flightIconSpan = document.createElement('span');
            flightIconSpan.className = 'material-icons text-green-500';

            const cityNameSpan = document.createElement('span'); // Changed to generic city name span

            // Determine which city to display (origin or destination)
            const originCode = flightData.origin?.code;
            const destinationCode = flightData.destination?.code;
            const originCity = flightData.origin?.city || 'N/A';
            const destinationCity = flightData.destination?.city || 'N/A';

            // Logic to display city based on SFO
            if (originCode === "KSFO") {
                cityNameSpan.textContent = destinationCity; // If origin is SFO, show destination city
            } else if (destinationCode === "KSFO") {
                cityNameSpan.textContent = originCity; // If destination is SFO, show origin city
            } else {
                cityNameSpan.textContent = destinationCity; // Default to destination city
            }

            // Determine and set the icon based on altitude_change
            const altitudeChange = flightData.last_position?.altitude_change;

            if (altitudeChange === "C") {
                flightIconSpan.textContent = 'flight_takeoff';
                flightIconSpan.classList.remove('hidden');
            } else if (altitudeChange === "D") {
                flightIconSpan.textContent = 'flight_land';
                flightIconSpan.classList.remove('hidden');
            } else {
                flightIconSpan.textContent = ''; // Clear icon if no match
                flightIconSpan.classList.add('hidden'); // Hide the icon span
            }
            
            cityDisplayDiv.appendChild(flightIconSpan);
            cityDisplayDiv.appendChild(cityNameSpan);

            // Airline Name, Flight Number, and Aircraft Type
            const detailsDiv = document.createElement('div');
            detailsDiv.className = 'text-lg text-gray-600';

            const identPrefix = flightData.ident.substring(0, 3);
            const airlineName = AIRLINE_CODES[identPrefix] || '';
            const flightNumber = flightData.ident_iata ? flightData.ident_iata.replace(/^[A-Z]+/, '') : 'N/A';
            const aircraftType = AIRCRAFT_TYPES[flightData.aircraft_type] || flightData.aircraft_type || 'N/A';

            detailsDiv.textContent = `${airlineName} ${flightNumber} | ${aircraftType}`;

            cardDiv.appendChild(cityDisplayDiv);
            cardDiv.appendChild(detailsDiv);

            return cardDiv;
        }

        /**
         * Loads flight data from a provided JSON object or fetches from API.
         * (Currently defaults to local JSON for demonstration)
         */
        async function loadFlightData() {
            // Clear previous cards and error messages
            flightCardsContainer.innerHTML = '';
            errorMessageDiv.classList.add('hidden');
            loadingIndicator.classList.remove('hidden'); // Show loading indicator

            try {
                // For demonstration, use default JSON data.
                // If you want to try the API call, uncomment the 'response' and 'data' lines below,
                // and comment out 'data = DEFAULT_FLIGHT_DATA;'.
                // Keep in mind CORS or API key issues might still prevent a successful fetch.
                
                const apiUrl = `${FLIGHTAWARE_BASE_URL}/search?latlong=${encodeURIComponent(SEARCH_LATLONG)}`;
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'x-apikey': FLIGHTAWARE_API_KEY,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                
                // let data = DEFAULT_FLIGHT_DATA; // Use local data for guaranteed display

                if (data && data.flights && data.flights.length > 0) {
                    data.flights.forEach(flight => {
                        const cardElement = createFlightCardElement(flight);
                        flightCardsContainer.appendChild(cardElement);
                    });
                } else {
                    errorMessageDiv.textContent = 'Clear skies!'; // Changed message
                    errorMessageDiv.classList.remove('hidden');
                }
            } catch (error) {
                errorMessageDiv.textContent = `Error loading flight data: ${error.message}. Please check your internet connection or API key.`;
                errorMessageDiv.classList.remove('hidden');
                console.error("Error loading flight data:", error);
            } finally {
                loadingIndicator.classList.add('hidden'); // Hide loading indicator
            }
        }

        // Load data automatically when the page loads
        document.addEventListener('DOMContentLoaded', loadFlightData);
    </script>
</body>
</html>
